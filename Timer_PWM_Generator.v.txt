module Timer_PWM_Generator(
    input wire clk,                  // Reloj principal
    input wire reset,                // Señal de reinicio
    input wire [1:0] TMR_SRC,        // Fuente del temporizador: 00=Disabled, 01=CPU Clock, 10=GPIO
    input wire [1:0] TMR_MODE,       // Modo del temporizador: 00=Normal, 01=Fast PWM, 10=Phase Correct
    input wire [31:0] TIMER_TOP,     // Valor máximo del contador
    input wire [31:0] PWM_CNTA,      // Valor de comparación para salida A
    input wire [31:0] PWM_CNTB,      // Valor de comparación para salida B
    output reg PWM_OUTA,             // Salida PWM A
    output reg PWM_OUTB,             // Salida PWM B
    output reg timer_interrupt       // Señal de interrupción
);

    // Contador principal de 32 bits
    reg [31:0] TIMER_CNT;
    reg direction; // Direccion para Phase Correct (0 = up, 1 = down)

    // Selección de la fuente del temporizador
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            TIMER_CNT <= 0;
            direction <= 0; // Inicializa el conteo hacia arriba
            timer_interrupt <= 0;
            PWM_OUTA <= 0;
            PWM_OUTB <= 0;
        end else if (TMR_SRC != 2'b00) begin
            case (TMR_MODE)
                2'b00: begin
                    // Modo Normal
                    if (TIMER_CNT == TIMER_TOP) begin
                        timer_interrupt <= 1;
                        TIMER_CNT <= 0; // Reinicia el contador
                    end else begin
                        TIMER_CNT <= TIMER_CNT + 1;
                    end
                end
                2'b01: begin
                    // Modo Fast PWM
                    if (TIMER_CNT == TIMER_TOP) begin
                        TIMER_CNT <= 0; // Reinicia el contador
                        PWM_OUTA <= (TIMER_CNT == PWM_CNTA);
                        PWM_OUTB <= (TIMER_CNT == PWM_CNTB);
                    end else begin
                        TIMER_CNT <= TIMER_CNT + 1;
                    end
                end
                2'b10: begin
                    // Modo Phase Correct PWM
                    if (TIMER_CNT == TIMER_TOP) begin
                        direction <= 1; // Cambia dirección a descendente
                    end else if (TIMER_CNT == 0) begin
                        direction <= 0; // Cambia dirección a ascendente
                    end

                    // Actualiza el contador
                    if (direction == 0)
                        TIMER_CNT <= TIMER_CNT + 1; // Conteo ascendente
                    else
                        TIMER_CNT <= TIMER_CNT - 1; // Conteo descendente

                    // Genera las señales PWM
                    PWM_OUTA <= (TIMER_CNT == PWM_CNTA);
                    PWM_OUTB <= (TIMER_CNT == PWM_CNTB);
                end
            endcase
        end
    end
endmodule
