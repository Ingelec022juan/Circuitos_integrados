`timescale 1ns / 1ps

module tb_Fast_PWM();

    // Declaración de señales
    reg clk;                         // Señal de reloj
    reg reset;                       // Señal de reinicio
    reg [31:0] TIMER_CNT;            // Contador actual
    reg [31:0] TIMER_TOP;            // Valor máximo del contador
    reg [31:0] PWM_CNTA;             // Valor de comparación para salida A
    reg [31:0] PWM_CNTB;             // Valor de comparación para salida B
    wire PWM_OUTA;                   // Salida PWM A
    wire PWM_OUTB;                   // Salida PWM B

    // Instancia del módulo Fast_PWM
    Fast_PWM uut (
        .clk(clk),
        .reset(reset),
        .TIMER_CNT(TIMER_CNT),
        .TIMER_TOP(TIMER_TOP),
        .PWM_CNTA(PWM_CNTA),
        .PWM_CNTB(PWM_CNTB),
        .PWM_OUTA(PWM_OUTA),
        .PWM_OUTB(PWM_OUTB)
    );

    // Generación del reloj
    initial begin
        clk = 0;
        forever #5 clk = ~clk; // Periodo del reloj: 10 ns (frecuencia: 100 MHz)
    end

    // Proceso de estímulos
    initial begin
        // Inicialización de señales
        reset = 1;                   // Activa el reset
        TIMER_CNT = 0;               // Contador inicial
        TIMER_TOP = 10;              // Valor máximo inicial
        PWM_CNTA = 5;                // Valor inicial de comparación para salida A
        PWM_CNTB = 7;                // Valor inicial de comparación para salida B

        // Liberar reset después de 20 ns
        #20 reset = 0;

        // Simular el incremento del contador
        forever #10 begin
            if (TIMER_CNT == TIMER_TOP) begin
                TIMER_CNT = 0;       // Reinicia el contador si alcanza el límite
            end else begin
                TIMER_CNT = TIMER_CNT + 1; // Incrementa el contador
            end
        end
    end

    // Monitor para observar las señales
    initial begin
        $monitor("Time: %0dns | clk: %b | reset: %b | TIMER_CNT: %d | TIMER_TOP: %d | PWM_CNTA: %d | PWM_CNTB: %d | PWM_OUTA: %b | PWM_OUTB: %b",
                 $time, clk, reset, TIMER_CNT, TIMER_TOP, PWM_CNTA, PWM_CNTB, PWM_OUTA, PWM_OUTB);
    end

    // Configuración para generación de archivo VCD
    initial begin
        $dumpfile("Fast.vcd"); // Nombre del archivo VCD
        $dumpvars(0, tb_Fast_PWM);    // Niveles de señales a registrar (0 = todos)
    end

    // Finalizar simulación tras un tiempo específico
    initial begin
        #200 $finish; // Detiene la simulación después de 200 ns
    end

endmodule
